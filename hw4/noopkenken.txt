No-op Kenken API
================

No-op Kenken must be able to not only return thhe possible boards T, but it must also return the set of
operations that are implied by the constraints (which are given by only numbers, but not operations
+, -, *, /).

Then, the API of No-op Kenken will be much like the API of Kenken, except with a modified constraints
list. Prolog terms passed as input to the solver should be 4 inputs now: N, C, T, and O, where N and C 
are ground terms, and T and O are variables that will be output for No-op Kenken. More specifically,


Inputs and Outputs:
===================
1. (+ Input) N, a nonnegative integer specifying the number of cells on each side of the Kenken square.
2. (+ Input) C, a list of numeric cage constraints given as target numbers and lists of positions only, 
e.g. [(11, [[1|1], [2|1]]), (2, [[1|2], [1|3]]), (20, [[1|4], [2|4]]), (6, [[1|5], [1|6], [2|6], [3|6]])].
3. (- Output) T, a list of list of integers. All the lists have length N. This represents the NxN grid with filled
in values, which is the solution to the particular Kenken problem.
4. (- Output) O, a list operations that correspond to the current solution T, e.g. [+, -, /, +, *]. There are m lists, with
m being the number of solutions T that may be formed from combinations of operations with the constraints
given. Each list has c elements, with c being the number of target numbers in the list of numeric cage
constraints C.


Expected Behavior
=================
In terms of expected behavior, no-op kenken should behave very much like kenken, with the exception that
values for T will be accompanied by values for O as well for each valid solution.

After unsuccessful calls, the user calling the API can expect a simple "no" response, without any output
T or O.

After successful calls, the user calling the API can expect a value T and O to be returned for a valid
board T constructed using the target numbers in C and operations specified in order by O. By pressing ";",
the user should either expect another set of T and O to be outputted representing a different valid solution,
or they should expect a "no" response, indicating there is no other successful solution that may be returned.


Example Call
============
Similarly to Kenken, we can expect No-op kenken to use fd solver for faster runtime, and to test
for all operations if there are only 2 points to reach the target number (e.g. (6, [[2|1], [3|2]])),
but otherwise only check for + or * which allow fewer or more than 2 points to be included in the 
calculation for satisfaction of reaching the product/sum. As a result, the example call must use 
fd_set_vector_max(255) like Kenken did.

The query will be:

| ?- fd_set_vector_max(255), no_op_kenken_testcase(N,C), no_op_kenken(N,C,T).

where 
no_op_kenken_testcase(
    3,
    [
      (6, [[1|2], [2|1]]),
      (2, [[2|2], [3|3]]),
      (3, [[1|1], [1|3]])
    ]
  ).

And the return value will be:

C = [6*[[1|2],[2|1]],2+[[2|2],[3|3]],3+[[1|1],[1|3]]]
N = 3
T = [[1,3,2],[2,1,3],[3,2,1]]
O = [*, +, +] ? ;

no
| ?-