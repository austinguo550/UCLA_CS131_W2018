Statistics for Kenken and Plain Kenken
======================================
We see that Kenken runs a lot faster than Plain Kenken because of optimizations that fd solver uses
over member and is, non fd solver variables.

When running Kenken on the test case with 
N = 4 
and 
C = [
   +(6, [[1|1], [1|2], [2|1]]),
   *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
   -(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),
   +(8, [[3|3], [4|3], [4|4]]),
   *(2, [[3|4]])
  ]

with the query being
| ?- statistics, kenken(
  4,
  [
   +(6, [[1|1], [1|2], [2|1]]),
   *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
   -(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),
   +(8, [[3|3], [4|3], [4|4]]),
   *(2, [[3|4]])
  ],
  T
), write(T), nl, fail.

Memory               limit         in use            free

   trail  stack      16383 Kb            0 Kb        16383 Kb
   cstr   stack      16384 Kb            0 Kb        16384 Kb
   global stack      32767 Kb            3 Kb        32764 Kb
   local  stack      16383 Kb            0 Kb        16383 Kb
   atom   table      32768 atoms      1796 atoms     30972 atoms

Times              since start      since last

   user   time       0.016 sec       0.002 sec
   system time       0.025 sec       0.003 sec
   cpu    time       0.041 sec       0.005 sec
   real   time     442.547 sec      48.399 sec



However, when running plain_kenken, we use the same test case with query
| ?- statistics, plain_kenken(
  4,
  [
   +(6, [[1|1], [1|2], [2|1]]),
   *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
   -(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),
   +(8, [[3|3], [4|3], [4|4]]),
   *(2, [[3|4]])
  ],
  T
), write(T), nl, fail.


Memory               limit         in use            free

   trail  stack      16383 Kb            0 Kb        16383 Kb
   cstr   stack      16384 Kb            0 Kb        16384 Kb
   global stack      32767 Kb            3 Kb        32764 Kb
   local  stack      16383 Kb            0 Kb        16383 Kb
   atom   table      32768 atoms      1806 atoms     30962 atoms

Times              since start      since last

   user   time       7.355 sec       0.001 sec
   system time       0.054 sec       0.003 sec
   cpu    time       7.409 sec       0.004 sec
   real   time     866.100 sec      34.068 sec



As we see, plain_kenken is much slower than kenken, taking a real time runtime of 866.100 sec vs 442.547
for kenken. This is almost 2 times slower in real time execution. Further, in terms of cpu time usage,
plain kenken uses 7.409 seconds while kenken only takes a small fraction of a second, at 0.041 seconds.

As a result, we know that there is a large performance difference in the restrictions of an fd_solver
implementation of kenken that restricts the vector_max element and imposes further restrictions, vs a 
simpler implementation of plain_kenken that only uses gprolog API predicates in its implementation.